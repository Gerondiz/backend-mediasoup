// handlers/chatHandler.js
const logger = require('../../utils/logger');

function handleChatMessage(data, context) {
  const { currentRoom, currentUser } = context;

  if (!currentRoom || !currentUser) {
    logger.warn('Chat message received but user is not in a room');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
  const chatMessage = {
    id: Date.now().toString(),
    from: currentUser.username,
    text: data.text,
    timestamp: new Date().toISOString(),
  };

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–Ω–∞—Ç—ã
  if (currentRoom.addChatMessage) {
    currentRoom.addChatMessage(chatMessage);
  }

  logger.info(`üí¨ Chat message from ${currentUser.username}: ${data.text}`);

  // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ (–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
  currentRoom.users.forEach(user => {
    try {
      user.socket.send(JSON.stringify({
        type: 'chat-message',
        data: { // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º data
          from: chatMessage.from,
          text: chatMessage.text,
          timestamp: chatMessage.timestamp
        }
      }));
    } catch (error) {
      logger.error('Error sending chat message to user:', error);
    }
  });
}

function handleGetChatHistory(context) {
  const { currentRoom, currentUser } = context;

  if (!currentRoom || !currentUser) {
    logger.warn('Get chat history received but user is not in a room');
    return;
  }

  if (currentRoom.getChatHistory) {
    const data = currentRoom.getChatHistory();
    currentUser.socket.send(JSON.stringify({
      type: 'chat-history',
       data
    }));
  }
}

module.exports = {
  handleChatMessage,
  handleGetChatHistory // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º
};