// src/tunnelManager.js
const { spawn } = require('child_process');
const axios = require('axios');
const logger = require('./utils/logger');
const config = require('./config');

class TunnelManager {
  constructor() {
    this.tunnelProcess = null;
    this.tunnelUrl = null;
    this.isEnabled = (config.server.useCloudflareTunnel === true);
    this.tunnelName = config.server.cloudflareTunnelName || 'sfu-tunnel';
    this.vercelApiUrl = config.server.vercelApiUrl;
  }

  async startTunnel() {
    if (!this.isEnabled) {
      logger.info('‚ùå Cloudflare Tunnel is disabled via config.');
      return;
    }

    if (!this.vercelApiUrl) { // <--- –ü—Ä–æ–≤–µ—Ä–∫–∞
      logger.error('‚ùå VERCEL_API_URL is not set. Cannot send tunnel URL.');
      console.error('[TUNNEL ERROR]: VERCEL_API_URL is not set. Cannot send tunnel URL.'); // ‚úÖ –î–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
      return; // <--- –í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    }

    logger.info(`üöÄ Starting Cloudflare Tunnel: ${this.tunnelName}`);

    const protocol = config.server.useHttps ? 'https' : 'http';
    const localUrl = `${protocol}://${config.server.host}:${config.server.port}`;

    logger.info(`üîó Attempting to create tunnel to: ${localUrl}`);

    this.tunnelProcess = spawn('cloudflared', ['tunnel', '--url', localUrl], {
      stdio: ['ignore', 'pipe', 'pipe'],
    });

    this.tunnelProcess.on('error', (err) => {
      logger.error('‚ùå Error starting Cloudflare Tunnel:', err);
      console.error(`[TUNNEL ERROR]: Error starting Cloudflare Tunnel:`, err); // ‚úÖ –í –∫–æ–Ω—Å–æ–ª—å
    });

    this.tunnelProcess.on('close', (code) => {
      logger.info(`üîí Cloudflare Tunnel process exited with code ${code}`);
      this.tunnelProcess = null;
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stdout –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL
    let outputBuffer = '';
    this.tunnelProcess.stdout.on('data', (data) => {
      const str = data.toString();
      outputBuffer += str;
      // console.log(`[CLOUDFLARED STDOUT]: ${str}`); // ‚úÖ –í–†–ï–ú–ï–ù–ù–û: –≤—ã–≤–æ–¥–∏–º stdout –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.debug(`.Stdout: ${str}`); // –õ–æ–≥–∏—Ä—É–µ–º stdout –∫–∞–∫ debug

      // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å URL (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ cloudflared –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
      // –û–±—ã—á–Ω–æ —ç—Ç–æ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ: "https://<random-string>.trycloudflare.com"
      const match = outputBuffer.match(/https:\/\/[a-zA-Z0-9-]+\.trycloudflare\.com/);
      if (match) {
        this.tunnelUrl = match[0];
        logger.info(`üîó Cloudflare Tunnel URL: ${this.tunnelUrl}`);
        console.log(`[TUNNEL URL FOUND]: ${this.tunnelUrl}`); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL –Ω–∞ Vercel
        this.sendTunnelUrlToVercel(this.tunnelUrl);

        // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        outputBuffer = '';
      }
    });

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    let errorBuffer = '';
    this.tunnelProcess.stderr.on('data', (data) => {
      const str = data.toString();
      errorBuffer += str;
      // console.error(`[CLOUDFLARED STDERR]: ${str}`); // ‚úÖ –í–†–ï–ú–ï–ù–ù–û: –≤—ã–≤–æ–¥–∏–º stderr –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      logger.debug(`.Stderr: ${str}`); // –õ–æ–≥–∏—Ä—É–µ–º stderr –∫–∞–∫ debug

      // –ò—â–µ–º URL –≤ stderr (cloudflared –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —Ç—É–¥–∞)
      const match = str.match(/https:\/\/[a-zA-Z0-9-]+\.trycloudflare\.com/);
      if (match) {
        this.tunnelUrl = match[0];
        logger.info(`üîó Cloudflare Tunnel URL (from stderr): ${this.tunnelUrl}`);
        console.log(`[TUNNEL URL FOUND (stderr)]: ${this.tunnelUrl}`); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL –Ω–∞ Vercel
        this.sendTunnelUrlToVercel(this.tunnelUrl);
      }

      // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—à–∏–±–∫–∏ –≤ stderr
      if (str.toLowerCase().includes('error') || str.toLowerCase().includes('failed') || str.toLowerCase().includes('timeout')) {
          const errorMsg = `üîç Potential error in cloudflared stderr: ${str.trim()}`;
          logger.warn(errorMsg);
          console.warn(`[TUNNEL ERROR]: ${errorMsg}`); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
      }
    });

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å –ª–∏ –æ—à–∏–±–æ–∫ –≤ –±—É—Ñ–µ—Ä–µ
    const errorCheckInterval = setInterval(() => {
        if (errorBuffer) {
            const errorMsg = `üîç Accumulated stderr: ${errorBuffer.trim()}`;
            logger.warn(errorMsg);
            console.warn(`[TUNNEL ERROR BUFFER]: ${errorMsg}`); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            errorBuffer = ''; // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –ø–æ—Å–ª–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        }
    }, 10000);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    this.tunnelProcess.on('close', () => {
        clearInterval(errorCheckInterval);
    });
  }

  async sendTunnelUrlToVercel(url) {
    // –î–æ–±–∞–≤–∏–º –ª–æ–≥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    logger.info(`üì§ Attempting to send tunnel URL to Vercel: ${url}`);
    console.log(`[TUNNEL SEND ATTEMPT]: ${url} to ${this.vercelApiUrl}`); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å

    if (!this.vercelApiUrl) {
      logger.error('‚ùå VERCEL_API_URL is not set. Cannot send tunnel URL.');
      console.error(`[TUNNEL SEND ERROR (sendTunnelUrlToVercel)]: VERCEL_API_URL is not set.`); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
      return;
    }

    try {
      await axios.post(this.vercelApiUrl, { url });
      logger.info(`‚úÖ Tunnel URL sent to Vercel: ${url}`);
      console.log(`[TUNNEL SENT TO VERCEL]: ${url}`); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    } catch (error) {
      logger.error('‚ùå Failed to send tunnel URL to Vercel:', error.message);
      console.error(`[TUNNEL SEND ERROR]:`, error.message); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
      if (error.response) {
        logger.error('Response status:', error.response.status);
        logger.error('Response ', error.response.data);
        console.error(`[TUNNEL SEND RESPONSE ERROR]: Status ${error.response.status}, Data:`, error.response.data); // ‚úÖ –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
      }
    }
  }

  stopTunnel() {
    if (this.tunnelProcess) {
      logger.info('üîí Stopping Cloudflare Tunnel...');
      this.tunnelProcess.kill('SIGTERM');
      this.tunnelProcess = null;
    }
  }
}

module.exports = TunnelManager;