// server.js
const logger = require('./utils/logger');
const { getExternalIP } = require('./utils/network');

// --- –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP —Å—é–¥–∞, –¥–æ –∏–º–ø–æ—Ä—Ç–∞ App ---
async function setupEnvironment() {
  if (!process.env.ANNOUNCED_IP) {
    logger.info('üîç ANNOUNCED_IP not set in environment, attempting to auto-detect...');
    try {
      const externalIP = await getExternalIP();
      process.env.ANNOUNCED_IP = externalIP;
      logger.info(`üåê Auto-detected and set ANNOUNCED_IP to: ${externalIP}`);
    } catch (ipError) {
      logger.error('‚ùå Failed to auto-detect external IP:', ipError.message);
      logger.warn('‚ö†Ô∏è Server may not work correctly for WebRTC. Please set ANNOUNCED_IP manually.');
      // process.exit(1); // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  } else {
    logger.info(`üåê Using ANNOUNCED_IP from environment: ${process.env.ANNOUNCED_IP}`);
  }
}

// --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º App —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ env ---
async function startServer() {
  try {
    await setupEnvironment(); // <-- –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ

    // –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º App –∏ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏, –∑–∞–≤–∏—Å—è—â–∏–µ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const App = require('./app');

    const app = new App();
    await app.start();

  } catch (error) {
    logger.error('Failed to start server:', error);
    process.exit(1);
  }
}

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

startServer();