// server.js
const App = require('./app');
const logger = require('./utils/logger');
const { getExternalIP } = require('./utils/network'); // <-- –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// --- –î–æ–±–∞–≤–ª–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
async function startServer() {
  try {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω –≤ env
    if (!process.env.ANNOUNCED_IP) {
      logger.info('üîç ANNOUNCED_IP not set in environment, attempting to auto-detect...');
      try {
        const externalIP = await getExternalIP();
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        process.env.ANNOUNCED_IP = externalIP;
        logger.info(`üåê Auto-detected and set ANNOUNCED_IP to: ${externalIP}`);
      } catch (ipError) {
        logger.error('‚ùå Failed to auto-detect external IP:', ipError.message);
        logger.warn('‚ö†Ô∏è Server may not work correctly for WebRTC. Please set ANNOUNCED_IP manually.');
        // –ú–æ–∂–Ω–æ –ª–∏–±–æ –≤—ã–π—Ç–∏, –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
        // process.exit(1);
      }
    } else {
      logger.info(`üåê Using ANNOUNCED_IP from environment: ${process.env.ANNOUNCED_IP}`);
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const app = new App();
    await app.start(); // <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ start —Ç–µ–ø–µ—Ä—å async

  } catch (error) {
    logger.error('Failed to start server:', error);
    process.exit(1);
  }
}

startServer();