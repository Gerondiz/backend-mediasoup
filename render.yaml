services:
  - type: pserv # Private Service
    name: mediasoup-sfu # Замените на желаемое имя
    env: node
    plan: standard # Free план недоступен для Private Services. Нужно выбрать standard или premium. Возможно, потребуется добавить карту оплаты.
    buildCommand: npm install
    startCommand: npm start
    # Указываем порты
    ports:
      - port: 3001 # Порт для HTTP API и WebSocket
        protocol: TCP
      - port: 3478 # Порт для TURN (если TURN запущен на этом же сервере, что и SFU)
        protocol: UDP
      - port: 3478
        protocol: TCP
      # Mediasoup Ports (пример для диапазона 40000-40100, уточните нужный диапазон)
      # ВАЖНО: Render может ограничивать количество портов в одной декларации.
      # Возможно, нужно будет объявить несколько блоков или использовать скрипт.
      # Ниже пример для небольшого диапазона. Для 40000-49999 потребуется другой подход,
      # возможно, просто указать минимальный и максимальный порт, если Render это поддерживает.
      # Проверьте документацию Render на предмет ограничений.
      - port: 40000-40100 # Пример диапазона. Уточните поддержку диапазонов.
        protocol: TCP
      - port: 40000-40100 # Пример диапазона. Уточните поддержку диапазонов.
        protocol: UDP
    envVars:
      - key: NODE_ENV
        value: production
      - key: HOST
        value: 0.0.0.0
      # PORT будет установлен Render'ом автоматически через переменную окружения,
      # но ваш код использует фиксированный 3001. Нужно убедиться, что он использует process.env.PORT.
      # Если Render назначит другой порт, а ваш сервер слушает 3001, соединение не установится.
      # Лучше изменить код сервера, чтобы он слушал process.env.PORT || 3001.
      # Для теста можно принудительно задать PORT=3001 в envVars, если сервер не может получить его из Render.
      # Однако, Render может переопределять это. Лучший путь - использовать process.env.PORT в коде.
      # - key: PORT
      #   value: "3001"
      # ANNOUNCED_IP должен быть внутренним IP адресом Private Service в сети Render
      # или внешним IP, если вы настроили статический IP.
      # Render может предоставить внутренний IP. Обычно это не публичный IP.
      # Вам нужно будет использовать публичный IP или домен, предоставленный Render,
      # для announcedIp, если клиенты подключаются снаружи.
      # Это сложная часть. См. примечание ниже.
      # - key: ANNOUNCED_IP
      #   value: <ПУБЛИЧНЫЙ_IP_ИЛИ_ДОМЕН_СЕРВИСА>
      # ALLOWED_ORIGINS нужно указать URL вашего клиента на Vercel
      - key: ALLOWED_ORIGINS
        value: https://webrtc-video-conference-two.vercel.app,http://localhost:3000 # Добавьте ваш Vercel URL
      # TURN сервер: Если TURN запущен на этом же сервере, настройте его.
      # Если TURN отдельно, то эти переменные могут быть не нужны или должны указывать на внешний TURN.
      # - key: TURN_URL
      #   value: turn:<ПУБЛИЧНЫЙ_IP_ИЛИ_ДОМЕН_СЕРВИСА>:3478
      # - key: TURN_USERNAME
      #   value: turnuser
      # - key: TURN_CREDENTIAL
      #   value: 12345678
      # Добавьте другие необходимые переменные окружения из вашего .env файла,
      # особенно если TURN/STUN настроен отдельно.
